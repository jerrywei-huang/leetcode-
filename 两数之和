"""
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。
"""

#暴力写法：每次拿两个数出来相加
from typing import List
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        """
        enumerate(nums) 返回一个迭代器，每次迭代产生一个包含索引 i 和对应元素值 x 的元组。
        在每一次迭代中，i 是元素在可迭代对象 nums 中的索引，而 x 是元素的值。
        例如，如果 nums 是一个列表 [10, 20, 30]，在循环的第一次迭代中，i 将是 0，
        x 将是 10；在第二次迭代中，i 将是 1，x 将是 20，依此类推。
        """
        for i,x in enumerate(nums):# i是索引（从0开始），x是值
            for j in range(i+1,len(nums)):
                if x+nums[j] == target:
                    return [i,j]
sol=Solution()
res=sol.twoSum([2,7,1,45],9)
print(res)

#哈希表写法
from typing import List
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        idx = {} #创建一个空哈希表（字典）
        for j,x in enumerate(nums):
            if target-x in idx:
                return [idx[target-x],j]
            idx[x]=j #如果不在idx中，将当前元素 x 及其索引 j 存储到字典 idx 中，以便后续查询
