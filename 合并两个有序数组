"""
给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，
分别表示 nums1 和 nums2 中的元素数目。

请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。

注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，
nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。
nums2 的长度为 n 。
"""

#方法一
from typing import List
class Solution:
    def merge(self,nums1:List[int],m:int,nums2:List[int],n:int):
        #通常在类的方法中，第一个参数需要命名为 self，这是一种约定俗成的规定，用于表示方法是属于类的实例的。
        #self 参数指向类的实例本身，允许在方法内部访问类的属性和调用其他方法。
        """
        :type nums1: List[int]
        :type m: s
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        nums1[m:]=nums2
        nums1.sort()
        return nums1
# 创建 Solution 类的实例
solution_instance = Solution()
# 调用 merge 函数并打印结果
res = solution_instance.merge([1,2,3,0,0,0],3,[2,5,6],3)
print(res)


#方法二
from typing import List
def merge(nums1:List[int],m:int,nums2:List[int],n:int):
    #定义的 merge 函数是一个普通的函数而不是类的方法，所以不需要 self 参数
    nums1[m:]=nums2
    nums1.sort()
    return nums1
#调用merge
result=merge([1,2,3,0,0,0],3,[2,5,6],3)
print(result)

