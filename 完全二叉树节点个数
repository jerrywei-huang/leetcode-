"""给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。

完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。
若最底层为第 h 层，则该层包含 1~ 2h 个节点。

"""

from typing import Optional
class TreeNode:
     def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def getDepth(self, root):  # 计算当前树的深度
        depth = 0
        while root:
            depth += 1
    #完全二叉树中，左子树的高度一定大于等于右子树的高度；若左子树与右子树高度相等，则为慢满二叉树
            root = root.left
        return depth
    
    def countNodes(self, root: TreeNode) -> int:
        cnt = 0
        while root:
            left = self.getDepth(root.left)  # 左子树深度
            right = self.getDepth(root.right)  # 右子树深度
            if left == right:  # 左右子树深度相同，左子树一定是满二叉树，右子树可能为满二叉树，一定为完全二叉树
                root = root.right
        #在满二叉树中，左子树是一个完整的满二叉树，节点个数为 2 ** left - 1。
        #因此，cnt += 2 ** left 等同于 cnt += 2 ** left - 1 + 1，即左子树的节点个数加上根节点。
                cnt += 2 ** left
            #若左右高度不相等，则不知道左子树是否为满二叉树
            
            else:              # 左右子树深度不同，右子树一定是满二叉树，左子树可能为满二叉树，一定为完全二叉树
                root = root.left
                cnt += 2 ** right
        return cnt
        
        
