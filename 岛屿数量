"""
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。
"""



class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def dfs(grid, r, c):
            # 边界条件判断：越界或者当前位置不是陆地
            if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] == '0':
                return
            # 将当前位置标记为已访问过
            grid[r][c] = '0'
            # 继续搜索当前位置的上、下、左、右四个相邻位置
            dfs(grid, r + 1, c)
            dfs(grid, r - 1, c)
            dfs(grid, r, c + 1)
            dfs(grid, r, c - 1)
        
        if not grid:
            return 0
        
        num_islands = 0
        rows, cols = len(grid), len(grid[0])
        for r in range(rows):
            for c in range(cols):
                # 当前位置为陆地，且未访问过
                if grid[r][c] == '1':
                    num_islands += 1
                    # 开始进行深度优先搜索
                    dfs(grid, r, c)
        
        return num_islands
