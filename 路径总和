"""
给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。

叶子节点 是指没有子节点的节点。
"""

# Definition for a binary tree node.
#判断的时候要判断值是否相等，不能直接节点用=
from typing import Optional
class TreeNode:
     def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def hasPathSum(self,root:Optional[TreeNode],targetSum:int) -> bool:
        if not root:
            return False
        if not root.left and not root.right:#当root的左子树和右子树都为空时
            return targetSum == root.val  # 若sum=root.val则返回True；若不相等，则为False
        #左右子树有一条路径符合即可
        return self.hasPathSum(root.left,targetSum-root.val) or self.hasPathSum(root.right,targetSum-root.val)
